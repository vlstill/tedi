@Inbook{Alglave2013,
    author="Alglave, Jade
        and Kroening, Daniel
        and Nimal, Vincent
        and Tautschnig, Michael",
    editor="Felleisen, Matthias
        and Gardner, Philippa",
    title="Software Verification for Weak Memory via Program Transformation",
    bookTitle="Programming Languages and Systems: 22nd European Symposium on Programming, ESOP 2013, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, Rome, Italy, March 16-24, 2013. Proceedings",
    year="2013",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="512--532",
    isbn="978-3-642-37036-6",
    doi="10.1007/978-3-642-37036-6_28",
    url="http://dx.doi.org/10.1007/978-3-642-37036-6_28",
    _read=1,
    _tags="memory model",
    _related_raw="[3,7] write atomicity relaxation, 6 RMO, 2 TSO sound and complete procedure, [4,5] axiomatic model and stability",
    _summary="Transformation for adding memory models (parametrized from TSO to POWER) to goto-programs together with optimization of the number of delays."
}

@inproceedings{Atig2010WMComplexity,
	author = {Atig, Mohamed Faouzi and Bouajjani, Ahmed and Burckhardt, Sebastian and Musuvathi, Madanlal},
	title = {On the Verification Problem for Weak Memory Models},
	booktitle = {Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	series = {POPL '10},
	year = {2010},
	isbn = {978-1-60558-479-9},
	location = {Madrid, Spain},
	pages = {7--18},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/1706299.1706303},
	doi = {10.1145/1706299.1706303},
	acmid = {1706303},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {infinite state systems, lossy channel systems, program verification, relaxed memory models},
	_tags="memory model",
	_read=1,
    _summary="Complexity and decidability analisys for memory models, showing
        TSO/PSO is non-elementary and RMO is undecidable, rather theoretical"
}

@Inbook{Bouajjani2015,
    author="Bouajjani, Ahmed
        and Calin, Georgel
        and Derevenetc, Egor
        and Meyer, Roland",
    editor="Egyed, Alexander
        and Schaefer, Ina",
    title="Lazy TSO Reachability",
    bookTitle="Fundamental Approaches to Software Engineering: 18th International Conference, FASE 2015, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015, London, UK, April 11-18, 2015, Proceedings",
    year="2015",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="267--282",
    isbn="978-3-662-46675-9",
    doi="10.1007/978-3-662-46675-9_18",
    url="http://dx.doi.org/10.1007/978-3-662-46675-9_18",
    _related = "Atig2010WMComplexity, Bouajjani2013 10 robustness",
    _read=1,
    _summary="TSO semi-decision procedure, lazyly extends runs with TSO
        semantics (starting from SC), complete only for acyclick programs. Uses
        robustness checker to detect which runs should be relaxed. On automata,
        not on programs."
}

@Inbook{Bouajjani2013,
    author="Bouajjani, Ahmed
        and Derevenetc, Egor
        and Meyer, Roland",
    editor="Felleisen, Matthias
        and Gardner, Philippa",
    title="Checking and Enforcing Robustness against TSO",
    bookTitle="Programming Languages and Systems: 22nd European Symposium on Programming, ESOP 2013, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, Rome, Italy, March 16-24, 2013. Proceedings",
    year="2013",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="533--553",
    isbn="978-3-642-37036-6",
    doi="10.1007/978-3-642-37036-6_29",
    url="http://dx.doi.org/10.1007/978-3-642-37036-6_29",
    _read=1,
    _summary="A reduction from TSO robustness/stability (all TSO traces
        correspond to some SC trace), to multiple SC reachability queries in
        instrumented program (which has limited buffering in one thered). The
        reduction requires O(n^2) queries and requires that all pairs of loads
        and stores for given thread are enumerated.
}











@Inbook{Ströder2014,
    author="Str{\"o}der, Thomas and Giesl, J{\"u}rgen and Brockschmidt, Marc and Frohn, Florian and Fuhs, Carsten and Hensel, Jera and Schneider-Kamp, Peter",
    editor="Demri, St{\'e}phane and Kapur, Deepak and Weidenbach, Christoph",
    title="Proving Termination and Memory Safety for Programs with Pointer Arithmetic",
    bookTitle="Automated Reasoning: 7th International Joint Conference, IJCAR 2014, Held as Part of the Vienna Summer of Logic, VSL 2014, Vienna, Austria, July 19-22, 2014. Proceedings",
    year="2014",
    publisher="Springer International Publishing",
    address="Cham",
    pages="208--223",
    isbn="978-3-319-08587-6",
    doi="10.1007/978-3-319-08587-6_15",
    url="http://dx.doi.org/10.1007/978-3-319-08587-6_15",
    _read=1,
    _tools="AProVE",
    _related_raw="9, 22 separation logic, 4 5 AProVE", 24 ARMC, 1 COSTA, 7 Cyclist, 29 FuncTion, 25 Julia, 12 KITTeL, 28 LoopFrog, 16 TAN, 14 TRex, 6 T2, 15 Ultimate",
    _summary = "termination analysis by encoding single nonrecursive LLVM function into integer transition system, uses separation logic"
}

@Article{Ströder2017,
    author="Str{\"o}der, Thomas
    and Giesl, J{\"u}rgen
    and Brockschmidt, Marc
    and Frohn, Florian
    and Fuhs, Carsten
    and Hensel, Jera
    and Schneider-Kamp, Peter
    and Aschermann, Cornelius",
    title="Automatically Proving Termination and Memory Safety for Programs with Pointer Arithmetic",
    journal="Journal of Automated Reasoning",
    year="2017",
    volume="58",
    number="1",
    pages="33--65",
    abstract="While automated verification of imperative programs has been studied intensively, proving termination of programs with explicit pointer arithmetic fully automatically was still an open problem. To close this gap, we introduce a novel abstract domain that can track allocated memory in detail. We use it to automatically construct a symbolic execution graph that over-approximates all possible runs of a program and that can be used to prove memory safety. This graph is then transformed into an integer transition system, whose termination can be proved by standard techniques. We implemented this approach in the automated termination prover AProVE and demonstrate its capability of analyzing C programs with pointer arithmetic that existing tools cannot handle.",
    issn="1573-0670",
    doi="10.1007/s10817-016-9389-x",
    url="http://dx.doi.org/10.1007/s10817-016-9389-x",
    _related = "Ströder2014 [extends]"
}


@inproceedings{Flanagan2005dpor,
    author = {Flanagan, Cormac and Godefroid, Patrice},
    title = {Dynamic Partial-order Reduction for Model Checking Software},
    booktitle = {Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
    series = {POPL '05},
    year = {2005},
    isbn = {1-58113-830-X},
    location = {Long Beach, California, USA},
    pages = {110--121},
    numpages = {12},
    url = {http://doi.acm.org/10.1145/1040305.1040315},
    doi = {10.1145/1040305.1040315},
    acmid = {1040315},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {partial-order reduction, software model checking},
    _read=1,
    _summary = "dynamic computation of partial order, however, it still 
} 
